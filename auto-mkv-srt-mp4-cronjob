auto detect mkv file, extrack subtitles, 

crontab -e

@reboot /usr/sbin/netplan apply
@reboot /usr/bin/ran.sh
@reboot /usr/bin/cronfiles.sh

-----------------------------------------------------------
/usr/bin/cronfiles.sh

#!/bin/bash
inotifywait --monitor -e moved_to -e create /mnt/incoming | while read dir;
do
(/usr/bin/process.sh)
done
-------------------------------------------------

process.sh

#!/bin/bash -x
find /mnt/incoming -regextype posix-egrep -regex '.*\.(avi|m2ts|flv|M2TS|3gp|AVI|MPG|mkv|MKV|ogv|wmv|WMV|mp4|mpg|divx|MPG|mpeg|ogg|ogm)$' -exec /usr/bin/mkv.sh "{}" \;
sleep 3
find /mnt/incoming -regextype posix-egrep -regex '.*\.(avi|m2ts|flv|M2TS|3gp|AVI|MPG|mkv|MKV|ogv|wmv|WMV|mp4|mpg|divx|MPG|mpeg|ogg|ogm)$' -exec ffmpeg -i "{}" -c copy "{}.mp4" \;
sleep 3
find /mnt/incoming -regextype posix-egrep -regex '.*\.(avi|m2ts|webvtt|M2TS|vtt|ssa|srt|AVI|MPG|mkv|MKV|ogv|wmv|WMV|mp4|mpg|divx|MPG|mpeg|ogg|ogm)$' -exec mv "{}" /mnt/downloads \;

---------------------------------------------------


mkv.sh

#!/bin/bash
#
# Version 1
#
# (C) 2016 Daniel Faust <hessijames@gmail.com>
#
# A BASH script that extracts subtitles from a matroska file.
#
# Requires mkvmerge, mkvextract
#
# Usage:
# chmod +x mkv-extract-subtitles
# ./mkv-extract-subtitles "My File.mkv"
#
# This will create a new file for each subtitle in the current directory.
#
# For batch processing all .mkv files in the current directoy
# copy mkv-extract-subtitles to a directory in your PATH and execute:
#
# find -iname "*.mkv" -exec mkv-extract-subtitles '{}' \;


if [[ "$1" == "" ]] || [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
	echo
	echo "Process single file:"
	echo "mkv-extract-subtitles file.mkv"
	echo
	echo "Process multiple files:"
	echo "find -iname \"*.mkv\" -exec mkv-extract-subtitles '{}'\;"
	echo
	exit
fi


hash mkvmerge 2>/dev/null || { echo >&2 "Error: Command mkvmerge not found"; exit 1; }
hash mkvextract 2>/dev/null || { echo >&2 "Error: Command mkvextract not found"; exit 1; }


file_name=$1

IFS='
'

tracks=$(LANG=en_US.utf8 LANGUAGE=en_US.utf8 mkvmerge --identify-verbose "$file_name" | tail --lines=+2)

for track in $tracks; do
	track_id=""
	[[ "$track" =~ Track\ ID\ ([0-9]+) ]] &&
		track_id=${BASH_REMATCH[1]}
	[[ "$track" =~ language:([a-z]+) ]] &&
		language=${BASH_REMATCH[1]}
	[[ "$track" =~ track_name:([^ ]+) ]] &&
		track_name=${BASH_REMATCH[1]}
	[[ "$track" =~ Track\ ID\ [0-9]+:\ ([a-z]*) ]] &&
		track_type=${BASH_REMATCH[1]}

	ext=""
	if [[ "$track" =~ S_TEXT/UTF8 ]]; then
		ext="srt"
	elif [[ "$track" =~ S_TEXT/ASS ]]; then
		ext="ssa"
	elif [[ "$track" =~ S_TEXT/USF ]]; then
		ext="usf"
	elif [[ "$track" =~ S_VOBSUB ]]; then
		ext="sub"
	elif [[ "$track" =~ S_HDMV/PGS ]]; then
		ext="sup"
	fi

	if [[ "$track_id" == "" ]]; then
		continue
	fi

	if [[ "$track_type" != "subtitles" ]]; then
		continue
	fi

	name="$track_id"
	if [[ "$language" != "" ]]; then
		name="$name, $language"
	fi
	if [[ "$track_name" != "" ]]; then
		track_name=${track_name/\//_}   # replace '/' with '_'
		track_name=${track_name/\\s/\ }  # replace '\s' with ' '
		track_name=${track_name/\\2/\"}  # replace '\2' with '"'
		track_name=${track_name/\\c/:}   # replace '\c' with ':'
		track_name=${track_name/\\h/#}   # replace '\h' with '#'
# 		track_name=${track_name/\\\\/\\} # replace '\\' with '\' doesn't work
		name="$name, $track_name"
	fi

	mkvextract tracks "$file_name" "$track_id:${file_name%.*} [$name].$ext"
done

--------------------------------------------------------------------------------------------------------------------
